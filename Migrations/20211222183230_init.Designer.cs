// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopApp.Data;

namespace ShopApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211222183230_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShopApp.Models.ShopItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpiryDate = new DateTime(2022, 2, 20, 18, 32, 29, 817, DateTimeKind.Utc).AddTicks(4254),
                            IsDeleted = false,
                            Name = "Banana",
                            ShopId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpiryDate = new DateTime(2022, 2, 20, 18, 32, 29, 817, DateTimeKind.Utc).AddTicks(5130),
                            IsDeleted = false,
                            Name = "Apple",
                            ShopId = 1
                        },
                        new
                        {
                            Id = 3,
                            ExpiryDate = new DateTime(2022, 2, 20, 18, 32, 29, 817, DateTimeKind.Utc).AddTicks(5134),
                            IsDeleted = false,
                            Name = "Phone",
                            ShopId = 2
                        },
                        new
                        {
                            Id = 4,
                            ExpiryDate = new DateTime(2022, 2, 20, 18, 32, 29, 817, DateTimeKind.Utc).AddTicks(5135),
                            IsDeleted = false,
                            Name = "PC",
                            ShopId = 2
                        },
                        new
                        {
                            Id = 5,
                            ExpiryDate = new DateTime(2022, 2, 20, 18, 32, 29, 817, DateTimeKind.Utc).AddTicks(5137),
                            IsDeleted = false,
                            Name = "TV",
                            ShopId = 2
                        },
                        new
                        {
                            Id = 6,
                            ExpiryDate = new DateTime(2022, 2, 20, 18, 32, 29, 817, DateTimeKind.Utc).AddTicks(5138),
                            IsDeleted = false,
                            Name = "Potato",
                            ShopId = 1
                        });
                });

            modelBuilder.Entity("ShopApp.Models.ShopItemTagModel", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("ShopItemId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ShopItemId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("ShopItemTags");
                });

            modelBuilder.Entity("ShopApp.Models.ShopModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Food Shop"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Electronics Shop"
                        });
                });

            modelBuilder.Entity("ShopApp.Models.TagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopItemModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopItemModelId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tag #1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tag #2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other Tag #3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "One more Tag #4"
                        });
                });

            modelBuilder.Entity("ShopApp.Models.ShopItemModel", b =>
                {
                    b.HasOne("ShopApp.Models.ShopModel", "Shop")
                        .WithMany("ShopItems")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopApp.Models.ShopItemTagModel", b =>
                {
                    b.HasOne("ShopApp.Models.ShopItemModel", "ShopItem")
                        .WithMany()
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopApp.Models.TagModel", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopItem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ShopApp.Models.TagModel", b =>
                {
                    b.HasOne("ShopApp.Models.ShopItemModel", null)
                        .WithMany("Tags")
                        .HasForeignKey("ShopItemModelId");
                });

            modelBuilder.Entity("ShopApp.Models.ShopItemModel", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ShopApp.Models.ShopModel", b =>
                {
                    b.Navigation("ShopItems");
                });
#pragma warning restore 612, 618
        }
    }
}
